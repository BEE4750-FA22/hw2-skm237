---
title: "BEE 4750/5750 Homework 2"
author: "Sarah Mack (skm237)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1

```julia

function CRUD_conc(x, U, Cs, Co, Bo, No, ka, kc, kn)
  # U is the stream velocity, Cs is the saturated oxygen saturation, Co is the initial dissolved DO conc,
  # Bo is the inital CBOD conc, No is the initial NBOD conc, ka is the reaeration rate, kc is the CBOD
  # CBOD decay rate, kn is the NBOD decay rate

  # terms that will end up in final equation
  a1 = exp((-ka*x)/U)
  a2 = (kc/(ka-kc))*(exp((-kc*x)/U)-exp((-ka*x/U)))
  a3 = (kn/(ka-kn))*(exp((-kn*x)/U)-exp((-ka*x/U)))

  # eq for concentration
  conc = Cs*(1-a1)+Co*a1-Bo*a2-No*a3

  # eq for CBOD
  CBOD = Bo*exp((-kc*x)/U)

  # eq for NBOD
  NBOD = No*exp((-kn*x)/U)

  return conc, CBOD, NBOD
end

# initialize for plotting
C = zeros(51);
B = zeros(51);
N = zeros(51);

# find vals at x=0
init_DO = ((7.5*1000*100000)+(5*1000*10000))/(1000*100000+1000*10000)
init_CBOD = ((5*1000*100000)+(50*1000*10000))/(1000*100000+1000*10000)
init_NBOD = ((5*1000*100000)+(35*1000*10000))/(1000*100000+1000*10000)
C[1] = init_DO;
B[1] = init_CBOD;
N[1] = init_NBOD;

# from x=1 to x=15
for i in 2:16
  C[i], B[i], N[i] = CRUD_conc(i-1, 6, 10, init_DO, init_CBOD, init_NBOD, .55, .35, .25)
end

# from x=15 to x=50
init_DO2 = ((C[16]*1000*110000)+(5*1000*15000))/(1000*110000+1000*15000)
init_CBOD2 = ((B[16]*1000*110000)+(45*1000*15000))/(1000*110000+1000*15000)
init_NBOD2 = ((N[16]*1000*110000)+(35*1000*15000))/(1000*110000+1000*15000)
for i in 16:51
  C[i], B[i], N[i] = CRUD_conc(i-16, 6, 10, init_DO2, init_CBOD2, init_NBOD2, .55, .35, .25)
end

# plot DO
using Plots
plot(C, title= "Dissolved Oxygen (DO) concentration", label= "DO concentration", xlabel="Distance (km)", ylabel= "DO (mg/L)")

```



## Problem 1.2

```julia

# initialize distance from waste stream 2
distfrom1=16

# find distance where DO recovers to 6 mg/L
  while C[distfrom1] < 6
    global distfrom1 += 1
  end
println(distfrom1)
println(C[distfrom1])

```

The distance at which the stream recovers to a DO of 6 mg/L if both waste streams are untreated is around 43 m 
after the first waste stream, or around 27 m after the second waste stream.




## Problem 1.3

```julia

function find_treatment_min(U, Cs, Co, Bo, No, C1, B1, N1, C2, B2, N2, ka, kc, kn, E1, E2)

    # find new treated vals for waste stream 1
    conc_treated1 = (1-(E1/100))*C1
    CBOD_treated1 = (1-(E1/100))*B1
    NBOD_treated1 = (1-(E1/100))*N1

    # find stream vals at x=0
    initial_DO1 = ((Co*1000*100000)+(conc_treated1*1000*10000))/(1000*100000+1000*10000)
    initial_CBOD1 = ((Bo*1000*100000)+(CBOD_treated1*1000*10000))/(1000*100000+1000*10000)
    initial_NBOD1 = ((No*1000*100000)+(NBOD_treated1*1000*10000))/(1000*100000+1000*10000)

    # find stream vals at x = 15
    DO_15, CBOD_15, NBOD_15 = CRUD_conc(15, U, Cs, initial_DO1, initial_CBOD1, initial_NBOD1, .55, .35, .25)

    # find new treated vals for waste stream 2
    conc_treated2 = (1-(E2/100))*C2
    CBOD_treated2 = (1-(E2/100))*B2
    NBOD_treated2 = (1-(E2/100))*N2

    # find stream vals after waste stream 2
    initial_DO2 = ((DO_15*1000*110000)+(conc_treated2*1000*15000))/(1000*110000+1000*15000)
    initial_CBOD2 = ((CBOD_15*1000*110000)+(CBOD_treated2*1000*15000))/(1000*110000+1000*15000)
    initial_NBOD2 = ((NBOD_15*1000*110000)+(NBOD_treated2*1000*15000))/(1000*110000+1000*15000)

    # find minimum for the treatment
    Cmin = 1000
    for i in 1:36
      newC, newB, newN = CRUD_conc(i-1, U, Cs, initial_DO2, initial_CBOD2, initial_NBOD2, ka, kc, kn)
      if newC < Cmin
        Cmin = newC
      end
    end
  return Cmin

end

# create vector of all possible treatments
treatment_plans = collect(0:100)

# initialize vector to store minimums
mins = zeros(101);

# iterate treatments
for i in 1:101
  mins[i] = find_treatment_min(6, 10, 7.5, 5, 5, 5, 50, 35, 5, 45, 35, .55, .35, .25, 0, treatment_plans[i])
end

# minimum %removal that has DO always less that 4 mg/L
tr = 1
while mins[tr] < 4
  global tr +=1
end
println(tr-1)
println(mins[tr])

```

The minimum treatment plan that guarantees all DO values are above 4 mg/L is waste stream 2 having a 
treatment of 14%.




## Problem 1.4

```julia

# create vector of all possible treatments
treatment_plans = collect(0:100)

# initialize vector to store minimums
mins2 = zeros(101);

# iterate treatments, each stream is treated equally
for i in 1:101
  mins2[i] = find_treatment_min(6, 10, 5, 50, 35, 5, 45, 35, .55, .35, .25, treatment_plans[i], treatment_plans[i])
end

# minimum %removal that has DO always less that 4 mg/L
tr2 = 1
while mins2[tr2] < 4
  global tr2 +=1
end
println(tr2-1)
println(mins2[tr2])

```

If the streams are treated equally, the treatment value that keeps the DO above 4 mg/L is 8% for each stream.




## Problem 1.5

In order to make a decision about the two treatment plans above, cost should be considered, as well as 
the plants' willingness to participate in a treatment plan. The first plan, only requiring waste stream 2 
to be treated, is not fair to the second plant as the first plant does not need to treat their waste. 
However, treating both waste streams would likely be more expensive,  or it would be tough getting both 
plants to agree to the treatment plan. I would be more likely to ask both plants to treat their waste 
at a rate of 8% as it is more fair, but there are other considerations to take into account in the real world.




## Problem 1.6

```julia

using Distributions

probs = zeros(100);

for j in 1:100

  global mins3 = zeros(100);
  global fails_regulation = zeros(0);
  global CBODs = zeros(100);
  global NBODs = zeros(100);

  for i in 1:100
    CBODs[i] = rand(Uniform(4, 7));
    NBODs[i] = rand(Uniform(3, 8));
  end

  for i in 1:100
    mins3[i] = find_treatment_min(6, 10, 7.5, CBODs[i], NBODs[i], 5, 50, 35, 5, 45, 35, .55, .35, .25, 8, 8);
  end

  for i in 1:100
   if mins3[i] < 4
     append!(fails_regulation, mins3[i]);
   end
  end

  probs[j] = (length(fails_regulation))/(length(mins3))

end

avg_prob = (sum(probs))/(length(probs))

```

The average probability that the treatment does not meet the requirement of DO above 4 mg/L is 
around 69%.




## Problem 1.7

```julia; echo=false
# This block will not show up in compiled output.

using Distributions
using PDMats

# This function samples n correlated variates distributed over 
# Uniform([a[1], a[2]]) and Uniform([b[1], b[2]]) with correlation coefficient
# corr_coef.
function sample_correlated_uniform(n, a, b, corr_coef=0.7)
  mvnorm = MvNormal([0, 0], PDMat([1 corr_coef; corr_coef 1])) # set up a multivariate normal with each marginal variance of 1 and the right correlation
  norm_samples = rand(mvnorm, n)' # sample from the multivariate normal, the marginal distributions are a standard normal
  unif_samples = cdf.(Normal(0, 1), norm_samples) # convert samples to a uniform distribution using the pdf of a standard Normal
  samples = (unif_samples .* [a[2] - a[1] b[2] - b[1]]) .+ [a[1] b[1]]
  return samples
end
```

## Problem 1.8

```

# References

Julia: append to an empty vector. Stack Overflow. https://stackoverflow.com/questions/28524105/julia-append-to-an-empty-vector 

Julia: short syntax for creating (1,n) array. Stack Overflow. https://stackoverflow.com/questions/45512271/julia-short-syntax-for-creating-1-n-array 

Repeated Evaluation: Loops. Control Flow. Julia Documentation. https://docs.julialang.org/en/v1/manual/control-flow/#man-loops 

Univariate Distributions. Distributions.jl. Julia Documentation. https://docs.juliahub.com/Distributions/xILW0/0.25.10/univariate/ 