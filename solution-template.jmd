---
title: "BEE 4750/5750 Homework 2"
author: "Your name here (your netID here)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1

```julia

function CRUD_conc(x, U, Cs, Co, Bo, No, ka, kc, kn)
  # U is the stream velocity, Cs is the saturated oxygen saturation, Co is the initial dissolved DO conc,
  # Bo is the inital CBOD conc, No is the initial NBOD conc, ka is the reaeration rate, kc is the CBOD
  # CBOD decay rate, kn is the NBOD decay rate

  # terms that will end up in final equation
  a1 = exp((-ka*x)/U)
  a2 = (kc/(ka-kc))*(exp((-ka*x)/U)-exp((-kc*x/U)))
  a3 = (kn/(ka-kn))*(exp((-kn*x)/U)-exp((-kc*x/U)))

  # eq for concentration
  conc = Cs*(1-a1)+Co*a1-Bo*a2-No*a3
  return conc
end

# initialize for plotting
c = zeros(51)

# from x=0 to x=15
init_DO = ((7.5*1000*100000)+(5*1000*10000))/(100000+10000)
init_CBOD = ((5*1000*100000)+(50*1000*10000))/(100000+10000)
init_NBOD = ((5*1000*100000)+(35*1000*10000))/(100000+10000)
for i in 1:16
  c[i] = CRUD_conc(i-1, 6, 10, init_DO, init_CBOD, init_NBOD, .55, .35, .25)
end

# from x=15 to x=50
init_DO2 = c[16]
b15 = init_CBOD*exp((-.35*15)/6)
n15 = init_NBOD*exp((-.25*15)/6)
init_CBOD2 = ((b15*110000)+(45*1000*15000))/(110000+15000)
init_NBOD2 = ((n15*110000)+(35*1000*15000))/(110000+15000)
for i in 16:50
  c[i] = CRUD_conc(i-1, 6, 10, init_DO2, init_CBOD2, init_NBOD2, .55, .35, .25)
end

using Plots

plot(c)

```

## Problem 1.2

## Problem 1.3

## Problem 1.4

## Problem 1.5

## Problem 1.6

## Problem 1.7

```julia; echo=false
# This block will not show up in compiled output.

using Distributions
using PDMats

# This function samples n correlated variates distributed over 
# Uniform([a[1], a[2]]) and Uniform([b[1], b[2]]) with correlation coefficient
# corr_coef.
function sample_correlated_uniform(n, a, b, corr_coef=0.7)
  mvnorm = MvNormal([0, 0], PDMat([1 corr_coef; corr_coef 1])) # set up a multivariate normal with each marginal variance of 1 and the right correlation
  norm_samples = rand(mvnorm, n)' # sample from the multivariate normal, the marginal distributions are a standard normal
  unif_samples = cdf.(Normal(0, 1), norm_samples) # convert samples to a uniform distribution using the pdf of a standard Normal
  samples = (unif_samples .* [a[2] - a[1] b[2] - b[1]]) .+ [a[1] b[1]]
  return samples
end
```

## Problem 1.8

```

# References